using System.Collections;
using System.Collections.Generic;
using UnityEngine;




namespace UnityCore
{
    namespace Audio
    {
         public class SoundManager : MonoBehaviour
         {


            public static SoundManager instance;


            public bool debug;
            public AudioTrack[] tracks;


            private Hashtable AudioTable; // relazione tra tipi di audio e traccie audio
            private Hashtable JobTable;


            [System.Serializable]
            public class AudioObject
            {
                public AudioType type;
                public AudioClip clip;
            }

            [System.Serializable]
            public class AudioTrack
            {
                public AudioSource source;
                public AudioObject[] audio;
            }

            #region Metodi Unity

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            private void Awake()
            {
                if (!instance)
                {
                    Configure();
                }
            }


            private void OnDisable()
            {
                Dispose();
            }
            #endregion

            #region Metodi Pubblici

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            public void PlayAudio(AudioType type)
            {

            }
            public void StopAudio(AudioType type)
            {

            }
            public void RestartAudio(AudioType type)
            {

            }


            #endregion

            #region Metodi Privati

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


            private void Configure()
            {
                instance = this;

                AudioTable = new Hashtable();
                JobTable = new Hashtable();
            }

            private void Dispose()
            {

            }

            private void GenerateAudioTable()
            {

            }

            private void Log(string _message)
            {
                if (!debug)
                {
                    return;
                }

                Debug.Log("[Audio Controller]: " + _message);
            }

            private void LogWarning(string _message)
            {
                if (!debug)
                {
                    return;
                }

                Debug.LogWarning("[Audio Controller]: " + _message);
            }

            #endregion




        }
    }
}

